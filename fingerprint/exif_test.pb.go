// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: exif_test.proto

package fingerprint

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExifTestCase struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SourceFile           string                 `protobuf:"bytes,1,opt,name=source_file,json=sourceFile,proto3" json:"source_file,omitempty"`
	Skip                 bool                   `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	WantErr              bool                   `protobuf:"varint,3,opt,name=want_err,json=wantErr,proto3" json:"want_err,omitempty"`
	WantCameraModel      string                 `protobuf:"bytes,4,opt,name=want_camera_model,json=wantCameraModel,proto3" json:"want_camera_model,omitempty"`
	WantCameraSerial     string                 `protobuf:"bytes,5,opt,name=want_camera_serial,json=wantCameraSerial,proto3" json:"want_camera_serial,omitempty"`
	WantPhotoId          string                 `protobuf:"bytes,6,opt,name=want_photo_id,json=wantPhotoId,proto3" json:"want_photo_id,omitempty"`
	WantUniquePhotoId    bool                   `protobuf:"varint,7,opt,name=want_unique_photo_id,json=wantUniquePhotoId,proto3" json:"want_unique_photo_id,omitempty"`
	WantPhotoIdFp        string                 `protobuf:"bytes,8,opt,name=want_photo_id_fp,json=wantPhotoIdFp,proto3" json:"want_photo_id_fp,omitempty"`
	WantPhotoIdFpQuality int32                  `protobuf:"varint,9,opt,name=want_photo_id_fp_quality,json=wantPhotoIdFpQuality,proto3" json:"want_photo_id_fp_quality,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ExifTestCase) Reset() {
	*x = ExifTestCase{}
	mi := &file_exif_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExifTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExifTestCase) ProtoMessage() {}

func (x *ExifTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_exif_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExifTestCase.ProtoReflect.Descriptor instead.
func (*ExifTestCase) Descriptor() ([]byte, []int) {
	return file_exif_test_proto_rawDescGZIP(), []int{0}
}

func (x *ExifTestCase) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *ExifTestCase) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *ExifTestCase) GetWantErr() bool {
	if x != nil {
		return x.WantErr
	}
	return false
}

func (x *ExifTestCase) GetWantCameraModel() string {
	if x != nil {
		return x.WantCameraModel
	}
	return ""
}

func (x *ExifTestCase) GetWantCameraSerial() string {
	if x != nil {
		return x.WantCameraSerial
	}
	return ""
}

func (x *ExifTestCase) GetWantPhotoId() string {
	if x != nil {
		return x.WantPhotoId
	}
	return ""
}

func (x *ExifTestCase) GetWantUniquePhotoId() bool {
	if x != nil {
		return x.WantUniquePhotoId
	}
	return false
}

func (x *ExifTestCase) GetWantPhotoIdFp() string {
	if x != nil {
		return x.WantPhotoIdFp
	}
	return ""
}

func (x *ExifTestCase) GetWantPhotoIdFpQuality() int32 {
	if x != nil {
		return x.WantPhotoIdFpQuality
	}
	return 0
}

var File_exif_test_proto protoreflect.FileDescriptor

var file_exif_test_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x78, 0x69, 0x66, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xee,
	0x02, 0x0a, 0x0c, 0x45, 0x78, 0x69, 0x66, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x12,
	0x2a, 0x0a, 0x11, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x6e, 0x74,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x77,
	0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x61, 0x6e,
	0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x61, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x5f,
	0x66, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x49, 0x64, 0x46, 0x70, 0x12, 0x36, 0x0a, 0x18, 0x77, 0x61, 0x6e, 0x74, 0x5f,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x70, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x77, 0x61, 0x6e, 0x74, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x46, 0x70, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x70,
	0x61, 0x6a, 0x61, 0x72, 0x6f, 0x6c, 0x61, 0x2f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x2f, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_exif_test_proto_rawDescOnce sync.Once
	file_exif_test_proto_rawDescData = file_exif_test_proto_rawDesc
)

func file_exif_test_proto_rawDescGZIP() []byte {
	file_exif_test_proto_rawDescOnce.Do(func() {
		file_exif_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_exif_test_proto_rawDescData)
	})
	return file_exif_test_proto_rawDescData
}

var file_exif_test_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_exif_test_proto_goTypes = []any{
	(*ExifTestCase)(nil), // 0: fingerprint.ExifTestCase
}
var file_exif_test_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_exif_test_proto_init() }
func file_exif_test_proto_init() {
	if File_exif_test_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exif_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_exif_test_proto_goTypes,
		DependencyIndexes: file_exif_test_proto_depIdxs,
		MessageInfos:      file_exif_test_proto_msgTypes,
	}.Build()
	File_exif_test_proto = out.File
	file_exif_test_proto_rawDesc = nil
	file_exif_test_proto_goTypes = nil
	file_exif_test_proto_depIdxs = nil
}
