// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.21.12
// source: fingerprint_test.proto

package fingerprint

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FingerprintTestCase struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceFile      string                 `protobuf:"bytes,2,opt,name=source_file,json=sourceFile,proto3" json:"source_file,omitempty"`
	Comment         []string               `protobuf:"bytes,3,rep,name=comment,proto3" json:"comment,omitempty"`
	Skip            bool                   `protobuf:"varint,4,opt,name=skip,proto3" json:"skip,omitempty"`
	WantErr         bool                   `protobuf:"varint,5,opt,name=want_err,json=wantErr,proto3" json:"want_err,omitempty"`
	WantFingerprint []*WantFingerprint     `protobuf:"bytes,6,rep,name=want_fingerprint,json=wantFingerprint,proto3" json:"want_fingerprint,omitempty"`
	Exif            *EXIFTestCase          `protobuf:"bytes,7,opt,name=exif,proto3" json:"exif,omitempty"`
	Xmp             *XMPTestCase           `protobuf:"bytes,8,opt,name=xmp,proto3" json:"xmp,omitempty"`
	ImgPhash        *ImgPHashTestCase      `protobuf:"bytes,9,opt,name=img_phash,json=imgPhash,proto3" json:"img_phash,omitempty"`
	VideoPhash      *VideoPHashTestCase    `protobuf:"bytes,10,opt,name=video_phash,json=videoPhash,proto3" json:"video_phash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FingerprintTestCase) Reset() {
	*x = FingerprintTestCase{}
	mi := &file_fingerprint_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FingerprintTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FingerprintTestCase) ProtoMessage() {}

func (x *FingerprintTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_fingerprint_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FingerprintTestCase.ProtoReflect.Descriptor instead.
func (*FingerprintTestCase) Descriptor() ([]byte, []int) {
	return file_fingerprint_test_proto_rawDescGZIP(), []int{0}
}

func (x *FingerprintTestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FingerprintTestCase) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *FingerprintTestCase) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *FingerprintTestCase) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *FingerprintTestCase) GetWantErr() bool {
	if x != nil {
		return x.WantErr
	}
	return false
}

func (x *FingerprintTestCase) GetWantFingerprint() []*WantFingerprint {
	if x != nil {
		return x.WantFingerprint
	}
	return nil
}

func (x *FingerprintTestCase) GetExif() *EXIFTestCase {
	if x != nil {
		return x.Exif
	}
	return nil
}

func (x *FingerprintTestCase) GetXmp() *XMPTestCase {
	if x != nil {
		return x.Xmp
	}
	return nil
}

func (x *FingerprintTestCase) GetImgPhash() *ImgPHashTestCase {
	if x != nil {
		return x.ImgPhash
	}
	return nil
}

func (x *FingerprintTestCase) GetVideoPhash() *VideoPHashTestCase {
	if x != nil {
		return x.VideoPhash
	}
	return nil
}

type WantFingerprint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       []string               `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
	WantKind      string                 `protobuf:"bytes,2,opt,name=want_kind,json=wantKind,proto3" json:"want_kind,omitempty"`
	WantHash      string                 `protobuf:"bytes,3,opt,name=want_hash,json=wantHash,proto3" json:"want_hash,omitempty"`
	WantQuality   int32                  `protobuf:"varint,4,opt,name=want_quality,json=wantQuality,proto3" json:"want_quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WantFingerprint) Reset() {
	*x = WantFingerprint{}
	mi := &file_fingerprint_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WantFingerprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WantFingerprint) ProtoMessage() {}

func (x *WantFingerprint) ProtoReflect() protoreflect.Message {
	mi := &file_fingerprint_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WantFingerprint.ProtoReflect.Descriptor instead.
func (*WantFingerprint) Descriptor() ([]byte, []int) {
	return file_fingerprint_test_proto_rawDescGZIP(), []int{1}
}

func (x *WantFingerprint) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *WantFingerprint) GetWantKind() string {
	if x != nil {
		return x.WantKind
	}
	return ""
}

func (x *WantFingerprint) GetWantHash() string {
	if x != nil {
		return x.WantHash
	}
	return ""
}

func (x *WantFingerprint) GetWantQuality() int32 {
	if x != nil {
		return x.WantQuality
	}
	return 0
}

type EXIFTestCase struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Comment           []string               `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
	Skip              bool                   `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	WantCameraModel   string                 `protobuf:"bytes,3,opt,name=want_camera_model,json=wantCameraModel,proto3" json:"want_camera_model,omitempty"`
	WantCameraSerial  string                 `protobuf:"bytes,4,opt,name=want_camera_serial,json=wantCameraSerial,proto3" json:"want_camera_serial,omitempty"`
	WantPhotoId       string                 `protobuf:"bytes,5,opt,name=want_photo_id,json=wantPhotoId,proto3" json:"want_photo_id,omitempty"`
	WantUniquePhotoId bool                   `protobuf:"varint,6,opt,name=want_unique_photo_id,json=wantUniquePhotoId,proto3" json:"want_unique_photo_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EXIFTestCase) Reset() {
	*x = EXIFTestCase{}
	mi := &file_fingerprint_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EXIFTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EXIFTestCase) ProtoMessage() {}

func (x *EXIFTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_fingerprint_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EXIFTestCase.ProtoReflect.Descriptor instead.
func (*EXIFTestCase) Descriptor() ([]byte, []int) {
	return file_fingerprint_test_proto_rawDescGZIP(), []int{2}
}

func (x *EXIFTestCase) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *EXIFTestCase) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *EXIFTestCase) GetWantCameraModel() string {
	if x != nil {
		return x.WantCameraModel
	}
	return ""
}

func (x *EXIFTestCase) GetWantCameraSerial() string {
	if x != nil {
		return x.WantCameraSerial
	}
	return ""
}

func (x *EXIFTestCase) GetWantPhotoId() string {
	if x != nil {
		return x.WantPhotoId
	}
	return ""
}

func (x *EXIFTestCase) GetWantUniquePhotoId() bool {
	if x != nil {
		return x.WantUniquePhotoId
	}
	return false
}

type XMPTestCase struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Comment        []string               `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
	Skip           bool                   `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	WantDocumentId string                 `protobuf:"bytes,3,opt,name=want_document_id,json=wantDocumentId,proto3" json:"want_document_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *XMPTestCase) Reset() {
	*x = XMPTestCase{}
	mi := &file_fingerprint_test_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XMPTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XMPTestCase) ProtoMessage() {}

func (x *XMPTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_fingerprint_test_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XMPTestCase.ProtoReflect.Descriptor instead.
func (*XMPTestCase) Descriptor() ([]byte, []int) {
	return file_fingerprint_test_proto_rawDescGZIP(), []int{3}
}

func (x *XMPTestCase) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *XMPTestCase) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *XMPTestCase) GetWantDocumentId() string {
	if x != nil {
		return x.WantDocumentId
	}
	return ""
}

type ImgPHashTestCase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       []string               `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
	Skip          bool                   `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	WantAzrHash   string                 `protobuf:"bytes,3,opt,name=want_azr_hash,json=wantAzrHash,proto3" json:"want_azr_hash,omitempty"`
	WantNr90Hash  string                 `protobuf:"bytes,4,opt,name=want_nr90_hash,json=wantNr90Hash,proto3" json:"want_nr90_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImgPHashTestCase) Reset() {
	*x = ImgPHashTestCase{}
	mi := &file_fingerprint_test_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImgPHashTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgPHashTestCase) ProtoMessage() {}

func (x *ImgPHashTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_fingerprint_test_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgPHashTestCase.ProtoReflect.Descriptor instead.
func (*ImgPHashTestCase) Descriptor() ([]byte, []int) {
	return file_fingerprint_test_proto_rawDescGZIP(), []int{4}
}

func (x *ImgPHashTestCase) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ImgPHashTestCase) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *ImgPHashTestCase) GetWantAzrHash() string {
	if x != nil {
		return x.WantAzrHash
	}
	return ""
}

func (x *ImgPHashTestCase) GetWantNr90Hash() string {
	if x != nil {
		return x.WantNr90Hash
	}
	return ""
}

type VideoPHashTestCase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       []string               `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
	Skip          bool                   `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	WantRicopHash string                 `protobuf:"bytes,3,opt,name=want_ricop_hash,json=wantRicopHash,proto3" json:"want_ricop_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoPHashTestCase) Reset() {
	*x = VideoPHashTestCase{}
	mi := &file_fingerprint_test_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoPHashTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPHashTestCase) ProtoMessage() {}

func (x *VideoPHashTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_fingerprint_test_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPHashTestCase.ProtoReflect.Descriptor instead.
func (*VideoPHashTestCase) Descriptor() ([]byte, []int) {
	return file_fingerprint_test_proto_rawDescGZIP(), []int{5}
}

func (x *VideoPHashTestCase) GetComment() []string {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *VideoPHashTestCase) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

func (x *VideoPHashTestCase) GetWantRicopHash() string {
	if x != nil {
		return x.WantRicopHash
	}
	return ""
}

var File_fingerprint_test_proto protoreflect.FileDescriptor

var file_fingerprint_test_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xb5, 0x03, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x77,
	0x61, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x52, 0x0f, 0x77, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x66, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x2e, 0x45, 0x58, 0x49, 0x46, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x65,
	0x78, 0x69, 0x66, 0x12, 0x2a, 0x0a, 0x03, 0x78, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x58,
	0x4d, 0x50, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x03, 0x78, 0x6d, 0x70, 0x12,
	0x3a, 0x0a, 0x09, 0x69, 0x6d, 0x67, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x2e, 0x49, 0x6d, 0x67, 0x50, 0x48, 0x61, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x50, 0x68, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x0b, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x48, 0x61, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x68, 0x61, 0x73, 0x68, 0x22, 0x88, 0x01,
	0x0a, 0x0f, 0x57, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x6e,
	0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x45, 0x58, 0x49,
	0x46, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x61, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x0b, 0x58, 0x4d, 0x50, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77,
	0x61, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x01,
	0x0a, 0x10, 0x49, 0x6d, 0x67, 0x50, 0x48, 0x61, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x12, 0x22, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x7a, 0x72, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x41, 0x7a, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x72, 0x39,
	0x30, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x61,
	0x6e, 0x74, 0x4e, 0x72, 0x39, 0x30, 0x48, 0x61, 0x73, 0x68, 0x22, 0x6a, 0x0a, 0x12, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x48, 0x61, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x26,
	0x0a, 0x0f, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x70, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6e, 0x74, 0x52, 0x69, 0x63,
	0x6f, 0x70, 0x48, 0x61, 0x73, 0x68, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x70, 0x61, 0x6a, 0x61, 0x72, 0x6f, 0x6c, 0x61, 0x2f, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x2f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_fingerprint_test_proto_rawDescOnce sync.Once
	file_fingerprint_test_proto_rawDescData []byte
)

func file_fingerprint_test_proto_rawDescGZIP() []byte {
	file_fingerprint_test_proto_rawDescOnce.Do(func() {
		file_fingerprint_test_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fingerprint_test_proto_rawDesc), len(file_fingerprint_test_proto_rawDesc)))
	})
	return file_fingerprint_test_proto_rawDescData
}

var file_fingerprint_test_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_fingerprint_test_proto_goTypes = []any{
	(*FingerprintTestCase)(nil), // 0: fingerprint.FingerprintTestCase
	(*WantFingerprint)(nil),     // 1: fingerprint.WantFingerprint
	(*EXIFTestCase)(nil),        // 2: fingerprint.EXIFTestCase
	(*XMPTestCase)(nil),         // 3: fingerprint.XMPTestCase
	(*ImgPHashTestCase)(nil),    // 4: fingerprint.ImgPHashTestCase
	(*VideoPHashTestCase)(nil),  // 5: fingerprint.VideoPHashTestCase
}
var file_fingerprint_test_proto_depIdxs = []int32{
	1, // 0: fingerprint.FingerprintTestCase.want_fingerprint:type_name -> fingerprint.WantFingerprint
	2, // 1: fingerprint.FingerprintTestCase.exif:type_name -> fingerprint.EXIFTestCase
	3, // 2: fingerprint.FingerprintTestCase.xmp:type_name -> fingerprint.XMPTestCase
	4, // 3: fingerprint.FingerprintTestCase.img_phash:type_name -> fingerprint.ImgPHashTestCase
	5, // 4: fingerprint.FingerprintTestCase.video_phash:type_name -> fingerprint.VideoPHashTestCase
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_fingerprint_test_proto_init() }
func file_fingerprint_test_proto_init() {
	if File_fingerprint_test_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fingerprint_test_proto_rawDesc), len(file_fingerprint_test_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fingerprint_test_proto_goTypes,
		DependencyIndexes: file_fingerprint_test_proto_depIdxs,
		MessageInfos:      file_fingerprint_test_proto_msgTypes,
	}.Build()
	File_fingerprint_test_proto = out.File
	file_fingerprint_test_proto_goTypes = nil
	file_fingerprint_test_proto_depIdxs = nil
}
